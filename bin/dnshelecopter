#!/usr/bin/env python3
from dnshelecopter import PolicyResolver
from dnslib.server import DNSServer, DNSLogger
from configparser import ConfigParser
import argparse, time

config_file = "config/dnshelecopter.conf"
p = argparse.ArgumentParser(description="Policy-based DNS Resolver")
p.add_argument("--config", "-c", default=config_file, metavar="<config>", help="specify the location of the configuration file.")
args = p.parse_args()

if args.config:
    config_file = args.config

config = ConfigParser()
with open(config_file, 'r') as fh:
    config.read_file(fh)

resolver = PolicyResolver(dict(config['dnshelecopter']))
logger = DNSLogger("request,reply,truncated,error", False)
udp_server = DNSServer(resolver, port=config.getint('dnshelecopter','server_bind_port'), address=config.get('dnshelecopter','server_bind_ip'), logger=logger)
udp_server.start_thread()
    
command_channels = config.get('dnshelecopter', 'command_channels').split(',')
discord = None
for ccname in command_channels:
    if ccname == 'discord':
        from dnshelecopter.discoredcontrol import DiscordControl
        cc = DiscordControl(config[ccname], resolver)
        cc.start()
    elif ccname == 'http':
        from dnshelecopter.httpcontrol import HTTPControl
        cc = HTTPControl(config[ccname], resolver)
        cc.run()
    elif ccname == 'cli':
        from dnshelecopter.clicontrol import CLIControl
        cc = CLIControl({}, resolver)
        cc.run()
    else:
        print("unknown command channel: %s" % ccname)
        continue
    resolver.add_command_channel(cc)
    
while True:
    time.sleep(1)